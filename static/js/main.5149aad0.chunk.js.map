{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOA8FeA,MA3Ff,WACE,OACI,yBAAKC,UAAU,UACb,yBAAKA,UAAU,KACf,yBAAKA,UAAU,UACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,MAAK,uBAAGC,KAAK,KAAR,+CACpB,yBAAKD,UAAU,MAAK,uBAAGC,KAAK,KAAR,mCACpB,yBAAKD,UAAU,MAAK,uBAAGC,KAAK,KAAR,yCACpB,yBAAKD,UAAU,MAAK,uBAAGC,KAAK,KAAR,wDAIxB,yBAAKD,UAAU,KACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,UACb,sEAAa,6BAAb,sIAA4C,6BAA5C,0FAEF,yBAAKA,UAAU,WAInB,yBAAKA,UAAU,KACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SACb,oFAEF,yBAAKA,UAAU,QACb,yBAAKA,UAAU,OAEf,yBAAKA,UAAU,MACb,yBAAKA,UAAU,QAEf,yBAAKA,UAAU,SAGjB,yBAAKA,UAAU,MACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SAEf,yBAAKA,UAAU,QACb,yCAGJ,yBAAKA,UAAU,OACb,wIAAwB,6BAAxB,8CAMV,yBAAKA,UAAU,KACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,OACb,0FAEF,yBAAKA,UAAU,YACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cAEf,yBAAKA,UAAU,eAGjB,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aACf,4BAAQA,UAAU,MAAlB,qDAEA,yBAAKA,UAAU,aACX,8HAA+B,6BAC/B,mIAMZ,yBAAKA,UAAU,KACb,yBAAKA,UAAU,WAGjB,yBAAKA,UAAU,KACb,yBAAKA,UAAU,WAGjB,yBAAKA,UAAU,KACb,yBAAKA,UAAU,aC3ELE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5149aad0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"parent\">\n        <div className=\"A\">\n        <div className=\"base-m\">\n          <div className=\"menu\">\n            <div className=\"m1\"><a href=\"#\">Главная</a></div>\n            <div className=\"m2\"><a href=\"#\">Скилы</a></div>\n            <div className=\"m3\"><a href=\"#\">Работы</a></div>\n            <div className=\"m4\"><a href=\"#\">Контакты</a></div>\n          </div>\n        </div>\n        </div>\n        <div className=\"B\">\n          <div className=\"baseB\">\n            <div className=\"resume\">\n              <span>Привет!<br/> Меня зовут Петров Сергей.<br/> Я front-and разработчик.</span>\n            </div>\n            <div className=\"foto\">\n            </div>\n          </div>\n        </div>\n        <div className=\"C\">\n          <div className=\"baseC\">\n            <div className=\"skill\">\n              <span>Мои скилы</span>\n            </div>\n            <div className=\"info\">\n              <div className=\"i1\">\n              </div>\n              <div className=\"i2\">\n                <div className=\"i21\">\n                </div>\n                <div className=\"i22\">\n                </div>\n              </div>\n              <div className=\"i3\">\n                <div className=\"i31\">\n                  <div className=\"i311\">\n                  </div>\n                  <div className=\"i312\">\n                    <span>React</span>\n                  </div>\n                </div>\n                <div className=\"i32\">\n                  <span>Подробное описание<br/> навыка</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"D\">\n          <div className=\"baseD\">\n            <div className=\"job\">\n              <span>Мои работы</span>\n            </div>\n            <div className=\"examples\">\n              <div className=\"example1\">\n                <div className=\"example11\">\n                </div>\n                <div className=\"example12\">\n                </div>\n              </div>\n              <div className=\"example2\">\n                <div className=\"example21\">\n                <button className=\"kn\">Смотреть</button>\n              </div>\n                <div className=\"example22\">\n                    <span1>Название проекта</span1><br/>\n                    <span2>Краткое описание</span2>\n                </div>\n              </div>\n            </div>\n        </div>\n        </div>\n        <div className=\"E\">\n          <div className=\"baseE\">\n          </div>\n        </div>\n        <div className=\"F\">\n          <div className=\"baseF\">\n          </div>\n        </div>\n        <div className=\"G\">\n          <div className=\"baseG\">\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}